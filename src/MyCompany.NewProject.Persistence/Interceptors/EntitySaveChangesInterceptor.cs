using MyCompany.NewProject.Core.Abstractions.Cache;
using MyCompany.NewProject.Core.Abstractions.DateTime;
using MyCompany.NewProject.Core.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Diagnostics;

namespace MyCompany.NewProject.Persistence.Interceptors;

public class EntitySaveChangesInterceptor : ISaveChangesInterceptor
{
    private List<Entity> _addedOrModifiedEntities = new();

    private readonly IDateTimeProvider _dateTimeProvider;
    private readonly IEntityCacheStore _entityCacheStore;

    public EntitySaveChangesInterceptor(
        IDateTimeProvider dateTimeProvider,
        IEntityCacheStore entityCacheStore)
    {
        _dateTimeProvider = dateTimeProvider;
        _entityCacheStore = entityCacheStore;
    }

    public ValueTask<InterceptionResult<int>> SavingChangesAsync(DbContextEventData eventData, InterceptionResult<int> result, CancellationToken cancellationToken = default)
    {
        var context = eventData.Context;
        if (context is not null)
        {
            _addedOrModifiedEntities = GetAddedOrModifiedEntities(context.ChangeTracker);
            SetAutoGeneratedProperties(_addedOrModifiedEntities);
        }

        return ValueTask.FromResult(result);
    }

    public InterceptionResult<int> SavingChanges(DbContextEventData eventData, InterceptionResult<int> result)
    {
        var context = eventData.Context;
        if (context is not null)
        {
            _addedOrModifiedEntities = GetAddedOrModifiedEntities(context.ChangeTracker);
            SetAutoGeneratedProperties(_addedOrModifiedEntities);
        }
        return result;
    }

    public ValueTask<int> SavedChangesAsync(SaveChangesCompletedEventData eventData, int result, CancellationToken cancellationToken = default)
    {
        InvalidateCache();
        return ValueTask.FromResult(result);
    }


    public int SavedChanges(SaveChangesCompletedEventData eventData, int result)
    {
        InvalidateCache();
        return result;
    }

    private static List<Entity> GetAddedOrModifiedEntities(ChangeTracker changeTracker)
    {
        return changeTracker.Entries()
            .Where(t => t is { Entity: Entity, State: EntityState.Added or EntityState.Modified })
            .Select(t => (Entity)t.Entity)
            .ToList();
    }

    private void SetAutoGeneratedProperties(List<Entity> entities)
    {
        foreach (var entity in entities)
        {
            entity.LastModified = _dateTimeProvider.Now;

            if (entity is IHasKey entityWithKey)
            {
                entityWithKey.Key = entityWithKey.CalculateKey();
            }
        }
    }

    private void InvalidateCache()
    {
        foreach (var entity in _addedOrModifiedEntities)
        {
            _entityCacheStore.Invalidate(new EntityCacheKey(entity.GetType()));
        }
    }
}